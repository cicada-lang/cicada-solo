datatype Nat {
  zero: Nat
  add1: (Nat) -> Nat
}
datatype List (E: Type) {
  null: List(E)
  cons: (E, List(E)) -> List(E)
}
datatype Vector (E: Type) (length: Nat) {
  null: Vector(E, Nat.zero)
  cons: (E, implicit prev: Nat, Vector(E, prev)) -> Vector(E, Nat.add1(prev))
}
datatype LessThan () (j: Nat, k: Nat) {
  zero_smallest: (n: Nat) -> LessThan(Nat.zero, Nat.add1(n))
  add1_smaller: (j: Nat, k: Nat, LessThan(j, k)) -> LessThan(Nat.add1(j), Nat.add1(k))
}
