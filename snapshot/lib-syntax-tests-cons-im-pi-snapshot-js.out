cong = the((implicit { X: Type, from: X, to: X }, target: Equal(X, from, to), implicit { Result: Type }, f: (_: X) -> Result) -> (implicit { Result: Type }, f: (_: X) -> Result) -> Equal(Result, f(from), f(to)), (given to, target) { (given Result, f) { replace(target, (to) { Equal(Result, f(from), f(to)) }, same) } })
cong = the((implicit { X: Type, from: X, to: X }, target: Equal(X, from, to), implicit { Result: Type }, f: (_: X) -> Result) -> (implicit { Result: Type }, f: (_: X) -> Result) -> Equal(Result, f(from), f(to)), (given to, target) { (given Result, f) { replace(target, (to) { Equal(Result, f(from), f(to)) }, same) } })
