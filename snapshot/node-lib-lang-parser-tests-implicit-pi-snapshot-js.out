let cong = the((implicit X: Type, implicit from: X, implicit to: X, Equal(X, from, to), implicit Result: Type, f: (X) -> Result) -> Equal(Result, f(from), f(to)), (implicit X, implicit from, implicit to, target, implicit Result, f) => { replace(target, (to) => Equal(Result, f(from), f(to)), refl) })
let cong = the((implicit X: Type, implicit from: X, implicit to: X, Equal(X, from, to), implicit Result: Type, f: (X) -> Result) -> Equal(Result, f(from), f(to)), (implicit X, implicit from, implicit to, target, implicit Result, f) => { replace(target, (to) => Equal(Result, f(from), f(to)), refl) })
