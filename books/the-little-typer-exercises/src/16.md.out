inl(refl): Either(Equal(Nat, 0, 0), (_: Equal(Nat, 0, 0)) -> Absurd)
inr((_) => { the(Absurd, replace(_, (x) => { nat_ind(x, (target_nat) => { Type }, Trivial, (prev, almost) => { Absurd }) }, sole)) }): Either(Equal(Nat, 0, 1), (_: Equal(Nat, 0, 1)) -> Absurd)
inr((_) => { the(Absurd, replace(_, (x) => { nat_ind(x, (target_nat) => { Type }, Trivial, (prev, almost) => { Absurd }) }, sole)) }): Either(Equal(Nat, 0, 2), (_: Equal(Nat, 0, 2)) -> Absurd)
inr((_) => { the(Absurd, replace(_, (x) => { nat_ind(x, (target_nat) => { Type }, Trivial, (prev, almost) => { Absurd }) }, sole)) }): Either(Equal(Nat, 0, 3), (_: Equal(Nat, 0, 3)) -> Absurd)
inl(refl): Either(Equal(Nat, 0, 0), (_: Equal(Nat, 0, 0)) -> Absurd)
inr((_) => { the(Absurd, replace(_, (x) => { nat_ind(x, (target_nat) => { Type }, Absurd, (prev, almost) => { Equal(Nat, 0, prev) }) }, refl)) }): Either(Equal(Nat, 1, 0), (_: Equal(Nat, 1, 0)) -> Absurd)
inr((_) => { the(Absurd, replace(_, (x) => { nat_ind(x, (target_nat) => { Type }, Trivial, (prev, almost) => { Absurd }) }, sole)) }): Either(Equal(Nat, 0, 1), (_: Equal(Nat, 0, 1)) -> Absurd)
inr((_) => { the(Absurd, replace(replace(replace(replace(replace(_, (x) => { nat_ind(x, (target_nat) => { Type }, Absurd, (prev, almost) => { Equal(Nat, 5, prev) }) }, refl), (x) => { nat_ind(x, (target_nat) => { Type }, Absurd, (prev, almost) => { Equal(Nat, 4, prev) }) }, refl), (x) => { nat_ind(x, (target_nat) => { Type }, Absurd, (prev, almost) => { Equal(Nat, 3, prev) }) }, refl), (x) => { nat_ind(x, (target_nat) => { Type }, Absurd, (prev, almost) => { Equal(Nat, 2, prev) }) }, refl), (x) => { nat_ind(x, (target_nat) => { Type }, Absurd, (prev, almost) => { Equal(Nat, 1, prev) }) }, refl)) }): Either(Equal(Nat, 6, 4), (_: Equal(Nat, 6, 4)) -> Absurd)