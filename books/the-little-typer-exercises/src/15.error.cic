// NOTE There was a scope BUG revealed by this example.
//   Thus we keep this as a regression test.

import { zero_add1_equal_absurd, sub1_equal } from "./15.md"

rest_bug(E: Type, n: Nat, vector: Vector(E, add1(n))): Vector(E, n) {
  motive(length: Nat, target: Vector(E, length)): Type {
    (j: Nat, equal: Equal(Nat, length, add1(j))) -> Vector(E, j)
  }

  aux: motive(add1(n), vector) =
    vector_ind(
      add1(n), vector,
      motive,
      (j, equal) => absurd_ind(zero_add1_equal_absurd(j, equal), Vector(E, j)),
      // NOTE The following will not pass type checker.
      //   (prev, head, tail, almost) => (j, equal) => tail
      // NOTE The right argument is:
      //   (prev, head, tail, almost) {
      //     (j, equal) => replace(sub1_equal(prev, j, equal), (x) => Vector(E, x), tail)
      //   }
      // NOTE The following should also not pass type checker.
      //   but it does pass type checker, if we do not ensure names in `ctx` are unique.
      //   - Pie ensures this by adding a `renaming` argument to all type checking functions,
      //     and use `reanming` during `readback`.
      //   - I handle this by using `subst` to rename bound variables.
      (j, head, tail, almost) => (j, equal) => tail
    )

  aux(n, refl)
}
