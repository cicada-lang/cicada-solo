@module lang3

@judgment Check(ctx: Map(String, Value), exp: Exp, t: Value) {
  Check(ctx, Exp.cls(List.null), Value.type)
  ----------------------------------------- cls_null

  Check(ctx, Exp.cls(List.cons({ name, t }, tail)), Value.type)
  ------------------------------------------------------------ cons_cls
  Check(ctx, t, Value.type)
  Check(Map.extend(ctx, name, t_value), Exp.cls(tail), Value.type)
  @where {
    t_value = Exp.evaluate(ctx.to_env(), t)
  }

  Check(ctx, Exp.obj(properties), Value.cls({ next: null }))
  ---------------------------------------------- obj_end

  Check(ctx, Exp.obj(properties), Value.cls(tel))
  ---------------------------------------------------------------- obj_next
  Map.Lookup(properties, name, exp)
  Check(ctx, exp, t)
  Check(ctx, Exp.obj(less_properties), Value.cls(filled_tel))
  @where {
    { name, t } = tel.next
    less_properties = Map.remove(properties, name)
    value = Exp.evaluate(ctx.to_env(), exp)
    filled_tel = Telescope.fill(tel, value)
  }

  Check(ctx, Exp.dot(target, name), t)
  ------------------------------------ dot
  Check(ctx, target, Value.cls(tel))
  @where {
    t = Telescope.dot(tel, name)
  }
}
