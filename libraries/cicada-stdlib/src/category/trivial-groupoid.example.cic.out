{
  Object: Trivial
  Morphism: (dom, cod) { Trivial }
  id: (x) { sole }
  compose: (x, y, z, f, g) { sole }
  id_left: (x, y, f) { same }
  id_right: (x, y, f) { same }
  compose_associative: (x, y, z, w, f, g, h) { same }
  inv: (x, y, f) { sole }
  inv_iso: (x, y, f) { {
    cat: {
      Object: Trivial
      Morphism: (dom, cod) { Trivial }
      id: (x1) { sole }
      compose: (x1, y1, z, f1, g) { sole }
      id_left: (x1, y1, f1) { same }
      id_right: (x1, y1, f1) { same }
      compose_associative: (x1, y1, z, w, f1, g, h) { same }
    }
    dom: sole
    cod: sole
    morphism: sole
    inverse: sole
    inverse_left: same
    inverse_right: same
  } }
}: class {
  Object: Type
  Morphism: (dom: Object, cod: Object) -> Type
  id: (x: Object) -> Morphism(x, x)
  compose: (x: Object, y: Object, z: Object, f: Morphism(x, y), g: Morphism(y, z)) -> Morphism(x, z)
  id_left: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, x, y, id(x), f), f)
  id_right: (x: Object, y: Object, f: Morphism(x, y)) -> Equal(Morphism(x, y), compose(x, y, y, f, id(y)), f)
  compose_associative: (x: Object, y: Object, z: Object, w: Object, f: Morphism(x, y), g: Morphism(y, z), h: Morphism(z, w)) -> Equal(Morphism(x, w), compose(x, y, w, f, compose(y, z, w, g, h)), compose(x, z, w, compose(x, y, z, f, g), h))
  inv: (x: Object, y: Object, f: Morphism(x, y)) -> Morphism(y, x)
  inv_iso: (x: Object, y: Object, f: Morphism(x, y)) -> class {
    cat: class {
      Object: Type
      Morphism: (dom: Object1, cod: Object1) -> Type
      id: (x1: Object1) -> Morphism1(x1, x1)
      compose: (x1: Object1, y1: Object1, z: Object1, f1: Morphism1(x1, y1), g: Morphism1(y1, z)) -> Morphism1(x1, z)
      id_left: (x1: Object1, y1: Object1, f1: Morphism1(x1, y1)) -> Equal(Morphism1(x1, y1), compose1(x1, x1, y1, id1(x1), f1), f1)
      id_right: (x1: Object1, y1: Object1, f1: Morphism1(x1, y1)) -> Equal(Morphism1(x1, y1), compose1(x1, y1, y1, f1, id1(y1)), f1)
      compose_associative: (x1: Object1, y1: Object1, z: Object1, w: Object1, f1: Morphism1(x1, y1), g: Morphism1(y1, z), h: Morphism1(z, w)) -> Equal(Morphism1(x1, w), compose1(x1, y1, w, f1, compose1(y1, z, w, g, h)), compose1(x1, z, w, compose1(x1, y1, z, f1, g), h))
    } = {
      Object: Object
      Morphism: (dom, cod) { Morphism(dom, cod) }
      id: (x1) { id(x1) }
      compose: (x1, y1, z, f1, g) { compose(x1, y1, z, f1, g) }
      id_left: (x1, y1, f1) { id_left(x1, y1, f1) }
      id_right: (x1, y1, f1) { id_right(x1, y1, f1) }
      compose_associative: (x1, y1, z, w, f1, g, h) { compose_associative(x1, y1, z, w, f1, g, h) }
    }
    dom: Object = x
    cod: Object = y
    morphism: Morphism(x, y) = f
    inverse: Morphism(y, x) = inv(x, y, f)
    inverse_left: Equal(Morphism(x, x), compose(x, y, x, f, inv(x, y, f)), id(x))
    inverse_right: Equal(Morphism(y, y), compose(y, x, y, inv(x, y, f), f), id(y))
  }
} 
