// 4. Easy as Pie

pair_elim: (
  A: Type, D: Type, X: Type,
  pair: (A) * D,
  maker: (A, D) -> X,
) -> X =
  (A, D, X, pair, maker) {
    maker(car(pair), cdr(pair))
  }

flip: (
  A: Type, D: Type, pair: (A) * D
) -> (D) * A =
  (A, D, pair) {
    cons(cdr(pair), car(pair))
  }

flip(Nat, String, cons(123, "abc"))
flip(String, Nat, flip(Nat, String, cons(123, "abc")))

the(
  Equal(
    Type,
    (A: Type, D: Type, pair: (A) * D) -> (D) * A,
    (Lemon: Type, Meringue: Type, (Lemon) * Meringue) -> (Meringue) * Lemon),
  same)

the(
  Equal(
    Type,
    (A: Type, D: Type, (A) * D) -> (D) * A,
    (A: Type, D: Type,
      (car(the((Type) * Type, cons(A, D)))) *
       cdr(the((Type) * Type, cons(A, D)))
    ) -> (D) * A),
  same)

swap: ((Nat) * String) -> (String) * Nat =
  (pair) {
    pair_elim(
      Nat, String, (String) * Nat, pair,
      (a, d) { cons(d, a) })
  }

swap(cons(123, "abc"))

twin: (X: Type, X) -> (X) * X =
  (X, x) { cons(x, x) }

twin(Nat, 123)
twin(String, "abc")
