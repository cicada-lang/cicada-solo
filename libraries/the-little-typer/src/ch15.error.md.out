I infer the type to be:
  Vector(E, j)
But the expected type is:
  Vector(E, j1)

previous:
- tail
- (equal) => { tail }
- (j, equal) => { tail }
- (almost, j, equal) => { tail }
- (tail, almost, j, equal) => { tail }
- (head, tail, almost, j, equal) => { tail }
- (j, head, tail, almost, j, equal) => { tail }
- vector_ind(add1(n), vector, motive, (j, equal) => { absurd_ind(zero_add1_equal_absurd(j, equal), Vector(E, j)) }, (j, head, tail, almost, j, equal) => { tail })
- the(motive(add1(n), vector), vector_ind(add1(n), vector, motive, (j, equal) => { absurd_ind(zero_add1_equal_absurd(j, equal), Vector(E, j)) }, (j, head, tail, almost, j, equal) => { tail }))
- aux = the(motive(add1(n), vector), vector_ind(add1(n), vector, motive, (j, equal) => { absurd_ind(zero_add1_equal_absurd(j, equal), Vector(E, j)) }, (j, head, tail, almost, j, equal) => { tail })) aux(n, refl)
- motive = the((length: Nat, target: Vector(E, length)) -> Type, (length, target) => { (j: Nat, equal: Equal(Nat, length, add1(j))) -> Vector(E, j) }) aux = the(motive(add1(n), vector), vector_ind(add1(n), vector, motive, (j, equal) => { absurd_ind(zero_add1_equal_absurd(j, equal), Vector(E, j)) }, (j, head, tail, almost, j, equal) => { tail })) aux(n, refl)
- (vector) => { motive = the((length: Nat, target: Vector(E, length)) -> Type, (length, target) => { (j: Nat, equal: Equal(Nat, length, add1(j))) -> Vector(E, j) }) aux = the(motive(add1(n), vector), vector_ind(add1(n), vector, motive, (j, equal) => { absurd_ind(zero_add1_equal_absurd(j, equal), Vector(E, j)) }, (j, head, tail, almost, j, equal) => { tail })) aux(n, refl) }
- (n, vector) => { motive = the((length: Nat, target: Vector(E, length)) -> Type, (length, target) => { (j: Nat, equal: Equal(Nat, length, add1(j))) -> Vector(E, j) }) aux = the(motive(add1(n), vector), vector_ind(add1(n), vector, motive, (j, equal) => { absurd_ind(zero_add1_equal_absurd(j, equal), Vector(E, j)) }, (j, head, tail, almost, j, equal) => { tail })) aux(n, refl) }
- (E, n, vector) => { motive = the((length: Nat, target: Vector(E, length)) -> Type, (length, target) => { (j: Nat, equal: Equal(Nat, length, add1(j))) -> Vector(E, j) }) aux = the(motive(add1(n), vector), vector_ind(add1(n), vector, motive, (j, equal) => { absurd_ind(zero_add1_equal_absurd(j, equal), Vector(E, j)) }, (j, head, tail, almost, j, equal) => { tail })) aux(n, refl) }
- the((E: Type, n: Nat, vector: Vector(E, add1(n))) -> Vector(E, n), (E, n, vector) => { motive = the((length: Nat, target: Vector(E, length)) -> Type, (length, target) => { (j: Nat, equal: Equal(Nat, length, add1(j))) -> Vector(E, j) }) aux = the(motive(add1(n), vector), vector_ind(add1(n), vector, motive, (j, equal) => { absurd_ind(zero_add1_equal_absurd(j, equal), Vector(E, j)) }, (j, head, tail, almost, j, equal) => { tail })) aux(n, refl) })
