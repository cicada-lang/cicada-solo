@module structure.group

@import datatype.Trivial

@class Monoid extends Semigroup {
  id: Elem

  id_left(x: Elem): TheEqual(Elem, mul(id, x), x)
  id_right(x: Elem): TheEqual(Elem, mul(x, id), x)
}

// NOTE How about the following definition with built-in associative?
@class Monoid {
  Elem: Type
  id: Elem
  mul(List(Elem)): Elem

  mul_id_left(x: List(Elem)): Equal(mul(List.append([id], x)), x)
  mul_id_right(x: List(Elem)): Equal(mul(List.append(x, [id])), x)
}
