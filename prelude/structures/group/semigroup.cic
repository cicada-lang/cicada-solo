@module structure.group

@class Semigroup {
  Elem: Type
  mul(x: Elem, y: Elem): Elem

  mul_associative(x: Elem, y: Elem, z: Elem): Equal(mul(x, mul(y, z)), mul(mul(x, y), z))
}

// NOTE How about the following definition with built-in associative?
@class Semigroup {
  Elem: Type
  mul(List(Elem)): Elem
}

// NOTE propositional equality in `mul_associative`
// is transfered the definitional equality of `List`.
@datatype List(A: Type) {
  null: List(A)
  cons(head: A, tail: List(A)): List(A)
}

// NOTE 这并不对，
// 因为想要表达广义结合律，还是需要用 propositional equality，
// 想要表达 `mul` 尊重 `List.append` 还是需要 propositional equality。

// NOTE 这种 class Semigroup 中的定律
// 与 inductive type List 之间的关系，
// 是否还值得深挖呢？
