@module lang2

Exp.check(Map(String, Value), Exp, Value): Trivial

Exp.check(ctx, Exp.fn(name, ret), new PiValue(arg_t, ret_t_cl)) = {
  arg_value = new NotYetValue(arg_t, new VarNeutral(name))
  ret_t = Closure.apply(ret_t_cl, arg_value)
  Exp.check(ctx.extend(name, arg_t), ret, ret_t)
}

Exp.check(ctx, Exp.fn(name, ret), Value.arrow(arg_t, ret_t)) = {
  Exp.check(ctx.extend(name, arg_t), ret, ret_t)
}

Exp.check(ctx, Exp.cons(car, cdr), Value.sigma(car_t, cdr_t_cl)) = {
  car_value = Exp.evaluate(ctx.to_env(), car)
  cdr_t = Closure.apply(cdr_t_cl, car_value)
  Exp.check(ctx, car, car_t)
  Exp.check(ctx, ret, ret_t)
}

Exp.check(ctx, Exp.cons(car, cdr), Value.pair(car_t, cdr_t)) = {
  Exp.check(ctx, car, car_t)
  Exp.check(ctx, ret, ret_t)
}
