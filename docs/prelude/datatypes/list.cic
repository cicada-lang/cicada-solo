@module datatype

@datatype List(A: Type) {
  null: List(A)
  cons(head: A, tail: List(A)): List(A)
}

List.length(x: List): Nat
List.length(List.null) = Nat.zero
List.length(List.cons(_head, tail)) = Nat.add1(List.length(tail))

@given A: Type
List.append(x: List(A), y: List(A)): List(A)
List.append(List.null, y) = y
List.append(List.cons(head, tail), y) = List.cons(head, List.append(tail, y))

@given A: Type, B: Type
List.map(x: List(A), f(A): B): List(B)
List.map(List.null, f) = null
List.map(List.cons(head, tail), f) = List.cons(f(head), List.map(tail, f))

List.three_Nat.zeros: List(Nat) =
  List.cons(Nat.zero, List.cons(Nat.zero, List.cons(Nat.zero, List.null)))

List.three_ones: List(Nat) =
  List.cons(one, List.cons(one, List.cons(one, List.null)))
