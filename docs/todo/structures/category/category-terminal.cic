@module structure.category

@class Terminal {
  cat: Category
  object: cat.Object
  morphism(x: cat.Object): cat.Morphism(x, object)

  @given x: cat.Object
  morphism_unique(
    f: cat.Morphism(x, object),
    g: cat.Morphism(x, object),
  ): TheEqual(cat.Morphism(x, object), f, g)
}

// TODO universal-construction

@given cat: cat.Object
terminal_iso(
  x: Terminal(cat),
  y: Terminal(cat),
): Category.Isomorphism(cat, x.object, y.object) = {
  f = x.morphism(y.object)
  g = y.morphism(x.object)
  new Category.Isomorphism {
    morphism = f
    inverse = g
    inverse_left = x.morphism_unique(cat.compose(f, g), cat.id(x.object))
    inverse_right = y.morphism_unique(cat.compose(g, f), cat.id(y.object))
  }
}

@given cat: Category
@given x: Terminal(cat), y: Terminal(cat)
terminal_iso_unique(
  f: Category.Isomorphism(cat, x.object, y.object),
  g: Category.Isomorphism(cat, x.object, y.object),
): TheEqual(Isomorphism(cat, x.object, y.object), f, g) =
  Same(new Category.Isomorphism {
    morphism = y.morphism_unique(f, g)
    inverse = y.morphism_unique(f, g)
  })
