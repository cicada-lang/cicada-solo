(implicit T, _) => T: (implicit T: Type, x: T) -> Type
(implicit A, _) => A: (implicit T: Type, x: T) -> Type
(implicit A, implicit B, _pair) => [A | B]: (implicit A: Type, implicit B: Type, pair: exists (_: A) B) -> exists (_: Type) Type
(implicit X, implicit Y, _pair) => [X | Y]: (implicit A: Type, implicit B: Type, pair: exists (_: A) B) -> exists (_: Type) Type
(implicit A, implicit B, implicit C, _pair) => [A | [B | C]]: (implicit A: Type, implicit B: Type, implicit C: Type, triple: exists (_: A, _1: B) C) -> exists (_: Type, _1: Type) Type
(implicit X, implicit Y, implicit Z, _pair) => [X | [Y | Z]]: (implicit A: Type, implicit B: Type, implicit C: Type, triple: exists (_: A, _1: B) C) -> exists (_: Type, _1: Type) Type
(implicit A, implicit B, implicit C, implicit D, target) => B: (implicit A: Type, implicit B: Type, implicit C: Type, implicit D: Type, target: exists (_: A, _1: B, _2: C) D) -> Type
(implicit A, implicit B, implicit C, implicit D, triple) => B: (implicit A: Type, implicit B: Type, implicit C: Type, implicit D: Type, target: exists (_: A, _1: B, _2: C) D) -> Type
(implicit A, implicit B, implicit C, implicit D, triple) => B: (implicit A: Type, implicit B: Type, implicit C: Type, implicit D: Type, target: exists (_: A, _1: B, _2: C) D) -> Type
(implicit A, implicit B, implicit C, implicit D, triple) => B: (implicit A: Type, implicit B: Type, implicit C: Type, implicit D: Type, target: exists (_: A, _1: B, _2: C) D) -> Type
(implicit A, implicit B, implicit C, implicit D, target) => C: (implicit A: Type, implicit B: Type, implicit C: Type, implicit D: Type, target: exists (_: A, _1: B, _2: C) D) -> Type
(implicit A, implicit B, implicit C, implicit D, triple) => C: (implicit A: Type, implicit B: Type, implicit C: Type, implicit D: Type, target: exists (_: A, _1: B, _2: C) D) -> Type
(implicit A, implicit B, implicit C, implicit D, triple) => C: (implicit A: Type, implicit B: Type, implicit C: Type, implicit D: Type, target: exists (_: A, _1: B, _2: C) D) -> Type
