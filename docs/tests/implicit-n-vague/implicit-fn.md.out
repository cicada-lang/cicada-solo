(implicit T, _) => T: (implicit T: Type, T) -> Type
(implicit A, _) => A: (implicit T: Type, T) -> Type
(implicit A, implicit B, _pair) => cons(A, B): (implicit A: Type, implicit B: Type, Pair(A, B)) -> Pair(Type, Type)
(implicit X, implicit Y, _pair) => cons(X, Y): (implicit A: Type, implicit B: Type, Pair(A, B)) -> Pair(Type, Type)
(implicit A, implicit B, implicit C, _pair) => cons(A, cons(B, C)): (implicit A: Type, implicit B: Type, implicit C: Type, Pair(A, Pair(B, C))) -> Pair(Type, Pair(Type, Type))
(implicit X, implicit Y, implicit Z, _pair) => cons(X, cons(Y, Z)): (implicit A: Type, implicit B: Type, implicit C: Type, Pair(A, Pair(B, C))) -> Pair(Type, Pair(Type, Type))
(implicit A, implicit B, implicit C, implicit D, target) => B: (implicit A: Type, implicit B: Type, implicit C: Type, implicit D: Type, Pair(A, Pair(B, Pair(C, D)))) -> Type
(implicit A, implicit B, implicit C, implicit D, triple) => B: (implicit A: Type, implicit B: Type, implicit C: Type, implicit D: Type, Pair(A, Pair(B, Pair(C, D)))) -> Type
(implicit A, implicit B, implicit C, implicit D, triple) => B: (implicit A: Type, implicit B: Type, implicit C: Type, implicit D: Type, Pair(A, Pair(B, Pair(C, D)))) -> Type
(implicit A, implicit B, implicit C, implicit D, triple) => B: (implicit A: Type, implicit B: Type, implicit C: Type, implicit D: Type, Pair(A, Pair(B, Pair(C, D)))) -> Type
(implicit A, implicit B, implicit C, implicit D, target) => C: (implicit A: Type, implicit B: Type, implicit C: Type, implicit D: Type, Pair(A, Pair(B, Pair(C, D)))) -> Type
(implicit A, implicit B, implicit C, implicit D, triple) => C: (implicit A: Type, implicit B: Type, implicit C: Type, implicit D: Type, Pair(A, Pair(B, Pair(C, D)))) -> Type
(implicit A, implicit B, implicit C, implicit D, triple) => C: (implicit A: Type, implicit B: Type, implicit C: Type, implicit D: Type, Pair(A, Pair(B, Pair(C, D)))) -> Type
