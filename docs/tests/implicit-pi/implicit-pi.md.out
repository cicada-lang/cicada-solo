(implicit A, x) => x: (implicit A: Type, x: A) -> A
(implicit A, x) => x: (implicit A: Type, x: A) -> A
(implicit A, x) => x: (implicit A: Type, x: A) -> A
"a": String
"a": String
"a": String
Trivial: Type
String: Type
"abc": String
(implicit A: Type, implicit B: Type, pair: [_: A | B]) -> Type: Type
(implicit A, implicit B, pair) => A: (implicit A: Type, implicit B: Type, pair: [_: A | B]) -> Type
(implicit A, implicit B, pair) => A: (implicit A: Type, implicit B: Type, pair: [_: A | B]) -> Type
Trivial: Type
Trivial: Type
String: Type
