(E, length) => Vector(E, length): (E: Type, length: Nat) -> Type
(length) => Vector(String, length): (length: Nat) -> Type
Vector(String, 3): Type
(vague E) => Vector.null(vague E): (vague E: Type) -> Vector(E, 0)
Vector.null(vague Nat): Vector(Nat, 0)
Vector.null(vague Nat): Vector(Nat, 0)
Vector.null(vague String): Vector(String, 0)
Vector.cons(vague Nat, vague 0, 1, Vector.null(vague Nat)): Vector(Nat, 1)
Vector.cons(vague Nat, vague 0, 1, Vector.null(vague Nat)): Vector(Nat, 1)
Vector.cons(vague Nat, vague 0, 1, Vector.null(vague Nat)): Vector(Nat, 1)
Vector.cons(vague String, vague 0, "a", Vector.null(vague String)): Vector(String, 1)
Vector.cons(vague String, vague 0, "a", Vector.null(vague String)): Vector(String, 1)
Vector.cons(vague String, vague 0, "a", Vector.null(vague String)): Vector(String, 1)
Vector.cons(vague String, vague 2, "a", Vector.cons(vague String, vague 1, "b", Vector.cons(vague String, vague 0, "c", Vector.null(vague String)))): Vector(String, 3)
Vector.cons(vague Nat, vague 0, 1, Vector.null(vague Nat)): Vector(Nat, 1)
Vector.cons(vague String, vague 0, "a"): Vector(String, 1)
(vague prev, head, tail) => Vector.cons(vague String, vague prev, head, tail): (vague prev: Nat, head: String, tail: Vector(String, prev)) -> Vector(String, add1(prev))
Vector.cons(vague String, vague 0, "a", Vector.null(vague String)): Vector(String, 1)
refl: Equal(Vector(Nat, 5), Vector.cons(vague Nat, vague 4, 1, Vector.cons(vague Nat, vague 3, 2, Vector.cons(vague Nat, vague 2, 3, Vector.cons(vague Nat, vague 1, 4, Vector.cons(vague Nat, vague 0, 5, Vector.null(vague Nat)))))), Vector.cons(vague Nat, vague 4, 1, Vector.cons(vague Nat, vague 3, 2, Vector.cons(vague Nat, vague 2, 3, Vector.cons(vague Nat, vague 1, 4, Vector.cons(vague Nat, vague 0, 5, Vector.null(vague Nat)))))))
refl: Equal(List(Nat), List.cons(vague Nat, 1, List.cons(vague Nat, 2, List.cons(vague Nat, 3, List.null(vague Nat)))), List.cons(vague Nat, 1, List.cons(vague Nat, 2, List.cons(vague Nat, 3, List.null(vague Nat)))))