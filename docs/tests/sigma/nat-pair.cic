let one = add1(zero)
let two = add1(one)
let three = add1(two)
let four = add1(three)

same_as_chart! Type [
  [_: Nat | Nat],
  Pair(Nat, Nat),
]

same_as_chart! [_: Nat | Nat] [
  cons(one, two),
  [one | two],
]

let one_two: [_: Nat | Nat] = cons(one, two)

same_as_chart! Nat [
  cdr(one_two),
  two,
]

same_as_chart! Type [
  [_: Nat, _: Nat | Nat],
  Pair(Nat, Pair(Nat, Nat)),
]

same_as_chart! [_: Nat, _: Nat | Nat] [
  cons(one, cons(two, three)),
  [one, two, | three],
]

let one_two_three: [_: Nat, _: Nat | Nat] = cons(one, cons(two, three))

same_as_chart! Nat [
  cdr(cdr(one_two_three)),
  three,
]

same_as_chart! Type [
  [_: Nat, _: Nat, _: Nat | Nat],
  Pair(Nat, Pair(Nat, Pair(Nat, Nat))),
]

same_as_chart! [_: Nat, _: Nat, _: Nat | Nat] [
  cons(one, cons(two, cons(three, four))),
  [one, two, three | four],
]

let one_two_three_four: [_: Nat, _: Nat, _: Nat | Nat] = cons(one, cons(two, cons(three, four)))

same_as_chart! Nat [
  cdr(cdr(cdr(one_two_three_four))),
  four,
]
