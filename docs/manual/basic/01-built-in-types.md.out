Type: Type
Type: Type
String: Type
String: Type
"Hello, World!": String
"Hello, World!": String
"Xie Yuheng": String
Trivial: Type
sole: Trivial
sole: Trivial
[_: String | Trivial]: Type
["abc" | sole]: [_: String | Trivial]
"abc": String
sole: Trivial
[_: String | Trivial]: Type
[_: String | Trivial]: Type
["abc" | sole]: [_: String | Trivial]
[_: Type, _1: String | Trivial]: Type
[String | ["abc" | sole]]: [_: Type, _1: String | Trivial]
refl: Equal([_: Type, _1: String | Trivial], [String | ["abc" | sole]], [String | ["abc" | sole]])
[x: [_: Type | Type] | car(x)]: Type
[[String | Trivial] | "ABC"]: [x: [_: Type | Type] | car(x)]
[[Trivial | String] | sole]: [x: [_: Type | Type] | car(x)]
refl: Equal(Type, [_: String | Trivial], [_: String | Trivial])
(_: String) -> Trivial: Type
(_: [_: String | Trivial]) -> [_1: Trivial | String]: Type
(x) => sole: (_: String) -> Trivial
(pair1) => [sole | car(pair1)]: (_: [_: String | Trivial]) -> [_1: Trivial | String]
sole: Trivial
["abc" | sole]: [_: String | Trivial]
[sole | "abc"]: [_: Trivial | String]
(T: Type, _: T) -> T: Type
"abc": String
sole: Trivial
(T, _) => _: (T: Type, _: T) -> T
Absurd: Type
(target, motive) => from_falsehood_anything(target, motive): (target: Absurd, motive: Type) -> motive
Equal(String, "abc", "abc"): Type
Equal(Trivial, sole, sole): Type
refl(vague String, vague "abc"): Equal(String, "abc", "abc")
refl(vague Trivial, vague sole): Equal(Trivial, sole, sole)
refl(vague String, vague "abc"): Equal(String, "abc", "abc")
refl(vague Trivial, vague sole): Equal(Trivial, sole, sole)
refl(vague String, vague "abc"): Equal(String, "abc", "abc")
refl(vague Trivial, vague sole): Equal(Trivial, sole, sole)
Equal(String, "abc", "de"): Type
