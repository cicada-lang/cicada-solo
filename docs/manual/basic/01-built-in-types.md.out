Type: Type
Type: Type
String: Type
String: Type
"Hello, World!": String
"Hello, World!": String
"Xie Yuheng": String
Trivial: Type
sole: Trivial
sole: Trivial
exists (_: String) Trivial: Type
cons("abc", sole): exists (_: String) Trivial
"abc": String
sole: Trivial
exists (_: String) Trivial: Type
exists (_: String) Trivial: Type
exists (_: Type, _1: String) Trivial: Type
cons(String, cons("abc", sole)): exists (_: Type, _1: String) Trivial
exists (x: exists (_: Type) Type) car(x): Type
cons(cons(String, Trivial), "ABC"): exists (x: exists (_: Type) Type) car(x)
cons(cons(Trivial, String), sole): exists (x: exists (_: Type) Type) car(x)
refl: Equal(Type, exists (_: String) Trivial, exists (_: String) Trivial)
(_: String) -> Trivial: Type
(_: exists (_: String) Trivial) -> exists (_1: Trivial) String: Type
(x) => sole: (_: String) -> Trivial
(pair1) => cons(sole, car(pair1)): (_: exists (_: String) Trivial) -> exists (_1: Trivial) String
sole: Trivial
cons("abc", sole): exists (_: String) Trivial
cons(sole, "abc"): exists (_: Trivial) String
(T: Type, _: T) -> T: Type
(T: Type, _: T) -> T: Type
"abc": String
sole: Trivial
(T, _) => _: (T: Type, _: T) -> T
Absurd: Type
(target, motive) => from_falsehood_anything(target, motive): (target: Absurd, motive: Type) -> motive
Equal(String, "abc", "abc"): Type
Equal(Trivial, sole, sole): Type
refl(vague String, vague "abc"): Equal(String, "abc", "abc")
refl(vague Trivial, vague sole): Equal(Trivial, sole, sole)
refl(vague String, vague "abc"): Equal(String, "abc", "abc")
refl(vague Trivial, vague sole): Equal(Trivial, sole, sole)
refl(vague String, vague "abc"): Equal(String, "abc", "abc")
refl(vague Trivial, vague sole): Equal(Trivial, sole, sole)
Equal(String, "abc", "de"): Type
