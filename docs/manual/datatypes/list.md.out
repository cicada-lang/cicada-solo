(E) => List(E): (Type) -> Type
List(String): Type
List(Trivial): Type
List.null(vague String): List(String)
List.cons(vague String, "a", List.null(vague String)): List(String)
List.cons(vague String, "a", List.cons(vague String, "b", List.null(vague String))): List(String)
List.cons(vague String, "a", List.cons(vague String, "b", List.cons(vague String, "c", List.null(vague String)))): List(String)
refl: Equal(Nat, Nat.add1(Nat.add1(Nat.add1(Nat.zero))), Nat.add1(Nat.add1(Nat.add1(Nat.zero))))
refl: Equal(List(String), List.cons(vague String, "a", List.cons(vague String, "b", List.cons(vague String, "c", List.cons(vague String, "a", List.cons(vague String, "b", List.cons(vague String, "c", List.null(vague String))))))), List.cons(vague String, "a", List.cons(vague String, "b", List.cons(vague String, "c", List.cons(vague String, "a", List.cons(vague String, "b", List.cons(vague String, "c", List.null(vague String))))))))
refl: Equal(List(Nat), List.cons(vague Nat, Nat.add1(Nat.zero), List.cons(vague Nat, Nat.add1(Nat.add1(Nat.zero)), List.cons(vague Nat, Nat.add1(Nat.add1(Nat.add1(Nat.zero))), List.null(vague Nat)))), List.cons(vague Nat, Nat.add1(Nat.zero), List.cons(vague Nat, Nat.add1(Nat.add1(Nat.zero)), List.cons(vague Nat, Nat.add1(Nat.add1(Nat.add1(Nat.zero))), List.null(vague Nat)))))
refl: Equal(List(String), List.cons(vague String, "a", List.cons(vague String, "b", List.cons(vague String, "c", List.cons(vague String, "d", List.null(vague String))))), List.cons(vague String, "a", List.cons(vague String, "b", List.cons(vague String, "c", List.cons(vague String, "d", List.null(vague String))))))
refl: Equal(List(String), List.cons(vague String, "c", List.cons(vague String, "b", List.cons(vague String, "a", List.null(vague String)))), List.cons(vague String, "c", List.cons(vague String, "b", List.cons(vague String, "a", List.null(vague String)))))
