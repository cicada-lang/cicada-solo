#!/usr/bin/env node

process.on("unhandledRejection", (error) => {
  console.error(error)
  process.exit(1)
})

const { run, test, expect, snapshot, info } = require("@xieyuheng/test-runner")
const changeCase = require("change-case")
const path = require("path")
const fs = require("fs")

let commands = {}

commands.t = async () => {
  await commands.test_all()
}

commands.test_all = async () => {
  await commands.test_lib()
  await commands.test_snapshot()
  await commands.test_cicada()
  await commands.test_examples()
  await commands.test_libraries()
}

commands.test_lib = async () => {
  await test("node $file", { file: "lib/**/*.test.js" }, expect.ok)
}

commands.test_snapshot = async () => {
  await test(
    "node $file",
    { file: "lib/**/*.snapshot.js" },
    snapshot.out(({ file }) =>
      path.resolve("snapshot", changeCase.paramCase(file) + ".out")
    )
  )
}

commands.test_cicada = async () => {
  await test(
    "./bin/cic.js run --no-module $file",
    { file: "tests/**/**.test.cic" },
    expect.ok
  )

  await test(
    "./bin/cic.js run --no-module $file",
    { file: "tests/**/**.snapshot.cic" },
    snapshot.out(({ file }) => file + ".out")
  )

  await test(
    "./bin/cic.js run --no-module $file",
    { file: "tests/**/**.error.cic" },
    snapshot.err(({ file }) => file + ".out")
  )
}

commands.test_examples = async () => {
  await test(
    "./bin/cic.js run --no-module $file",
    { file: "examples/**/**.cic" },
    expect.ok
  )
}

commands.test_libraries = async () => {
  await test(
    "./bin/cic.js check-library libraries/the-little-typer/library.json",
    {},
    expect.ok
  )
  await test(
    "./bin/cic.js check-library libraries/cicada-stdlib/library.json",
    {},
    expect.ok
  )
}

info()

run(commands)
